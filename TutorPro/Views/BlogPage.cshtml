@using System.Globalization
@using Umbraco.Cms.Web.Common.PublishedModels;
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<ContentModels.BlogPage>
@using ContentModels = Umbraco.Cms.Web.Common.PublishedModels;
@{
    Layout = "Main.cshtml";
    var culture = Model.GetCultureFromDomains();
}

<section class="inner-top blog-top radial-bg">
    <div class="container">
        <span class="decor-element ring1 parallax-element"></span>
        @if (Model.TDecors != null)
        {
            @foreach (var decor in Model.TDecors)
            {
                @await Html.PartialAsync("tutorPartials/TDecorItem", decor.Content)
            }
        }
        <div class="blog__top-preview">
            @{
                var allCategories = Model.Children.OfType<BlogCategoryPage>();

                var allPosts = allCategories
                .SelectMany(category => category.Children.OfType<BlogArticle>())
                .Concat(Model.Children.OfType<BlogArticle>());

                var firstBlog = allPosts
                .OrderByDescending(post => post.TPublicDate)
                .FirstOrDefault();

                var cultureInfo = new CultureInfo(culture);
                var formattedDate = firstBlog?.TPublicDate.ToString("D", cultureInfo);
                formattedDate = formattedDate.Split(' ', 2)[1];
            }
            @if (firstBlog != null)
            {
                <div class="large_blog-block">
                    <a class="blog__item-main" href="@firstBlog.Url()">
                        <div class="blog__item-image">
                        @if (firstBlog.TImage != null)
                        {                            
                             <img loading="lazy" src="@firstBlog.TImage?.Url()" alt="Article image">                           
                        }
                        else
                        {
                             <img>
                        }
                        </div>
                        <p class="blog__item-title" style="font-size:150%">@firstBlog.TTitle</p>
                        <span class="blog__item_main-date">@formattedDate</span>
                    </a>
                </div>
            }
            <div class="side-block">
                <div class="blog-block">
                    @if (Model.TNewsletter != null)
                    {
                        @await Html.PartialAsync("tutorPartials/TNewsletter", Model.TNewsletter.FirstOrDefault()?.Content, new ViewDataDictionary(ViewData) { { "culture", culture } })
                    }
                </div>
                
                <div class="blog-block">
                    <div class="blog__top-preview_title">
                    <p>@Model.TTitleMessage</p>
                    </div>
                </div>
            </div>
           
                
        </div>
        
        @{
            var categories = Model.Children.Where(c => c is BlogCategoryPage).ToList();
        }
        @if(categories.Any())
        {
            <div class="blog__top">
                <p class="categories__block_title">@Umbraco.GetDictionaryValueOrDefault("Categories", "Categories")</p>
                <div class="categories__block">                    
                    @foreach (var category in categories)
                    {
                        @await Html.PartialAsync("tutorPartials/TCategoryCard", category)
                    }
                </div>
            </div>
           
        }     
    </div>
</section>

<!-- Section "Blog" -->
<div class="blog">
    <div class="container">
        <!-- Blog items block -->
        <span class="decor-element ring1 parallax-element"></span>
        <p class="blog__title">@Umbraco.GetDictionaryValueOrDefault("Latest posts", "Latest posts")</p>
        <div class="blog__block" data-culture="@culture" data-pageSize="@Model.TPageSize" data-notFoundMessage="@Model.TNotFoundMessage" data-border="@Model.TChildBorder">
            
        </div>

        <!-- Pagenation of pages -->
        <div class="blog__pagination pagination">
            <ul class="pagination__list">
                
            </ul>
        </div>
    </div>
</div>
@if (Model.TActions != null)
{
    @await Html.GetBlockGridItemsHtmlAsync(Model.TActions)
}

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js" defer></script>
<script src="~/js/blog.min.js" defer></script>