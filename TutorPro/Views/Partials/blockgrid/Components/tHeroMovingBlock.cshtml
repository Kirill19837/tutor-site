@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<Umbraco.Cms.Core.Models.Blocks.BlockGridItem>

@{
    var content = (THeroMovingBlock)Model.Content;
    var bottomInfo = content.TBottomInfo?.Content;
    var mainClass = content.TStyle == "teacher" ? "teacher-info " : "";
    mainClass += "school-info";
}

<!-- Section "Description (with moving elements)" -->
<section class="@mainClass">
    <div class="school-info__top">
        <div class="container">
            @if(content.TStyle == "teacher")
            {
                <span class="decor-element points-1 parallax-element">
                    <img src="~/images/icons/decor-elements/decor-points-green.svg" alt="Decor points">
                </span>
            }
            <h2 class="school-info__title section-title">@content.TTitle</h2>
            @if(content.TSubTitle != null)
            {
                <p class="school-info__subtitle">@content.TSubTitle</p>
            }
        </div>
         <!-- Block with MOVING elements -->
        <div class="school-info__moving-block animated">
            @if (content.TMovingBlocks != null)
            {
                @foreach(var block in content.TMovingBlocks)
                {                                           
                    @if(block.Content is THeroMoving movingBlock && movingBlock.TItems != null)
                    {
                        <div class="animated__row-wrap" data-duration="@(movingBlock.TDuration)s" data-left-offset="@(movingBlock.TLeftOffset)px" tabindex="0">
                        @for (int i = 0; i < 2; i++)
                        {
                            <div class="animated__row">
                                @foreach (var item in movingBlock.TItems)
                                {
                                    @await Html.PartialAsync("tutorPartials/THeroMovingItem", item.Content)
                                }
                            </div>
                        }
                    </div>
                    }                      
                    
                }
            }
        </div>
    </div>
    @if(bottomInfo != null)
    {
        <div class="school-info__bottom">
            <div class="container">
                @if(content.TStyle == "school")
                {
                    <div class="school-info__description description-block reverse">
                        <div class="description-block__info">
                            <span class="description-block__title">@bottomInfo.TTitle</span>
                            <p class="description-block__text">@bottomInfo.TText</p>
                            @if (bottomInfo.TButton != null)
                            {
                                @await Html.PartialAsync("tutorPartials/TButton", bottomInfo.TButton.Content, new ViewDataDictionary(ViewData) { { "class", "description-block__link" }, { "span", true } })
                            }
                        </div>
                        <div class="description-block__image big-image">
                            @Html.GetBlockGridHtml(bottomInfo.TImage)
                            @if (content.TDecors != null)
                            {
                                @foreach (var decor in content.TDecors)
                                {
                                    @await Html.PartialAsync("tutorPartials/TDecorItem", decor.Content)
                                }
                            }
                        </div>
                    </div>
                }
                else if (content.TStyle == "teacher")
                {
                    <div class="school-info__descr">
                        <div class="school-info__descr-image">
                            @Html.GetBlockGridHtml(bottomInfo.TImage)
                            @if (content.TDecors != null)
                            {
                                @foreach (var decor in content.TDecors)
                                {
                                    @await Html.PartialAsync("tutorPartials/TDecorItem", decor.Content)
                                }
                            }
                        </div>
                        <p class="school-info__descr-text">@bottomInfo.TText</p>
                        @if (bottomInfo.TButton != null)
                        {
                            @await Html.PartialAsync("tutorPartials/TButton", bottomInfo.TButton.Content, new ViewDataDictionary(ViewData) { { "class", "school-info__descr-link" }, { "span", true } })
                        }
                    </div>
                }
            </div>
        </div>
    }  
</section>